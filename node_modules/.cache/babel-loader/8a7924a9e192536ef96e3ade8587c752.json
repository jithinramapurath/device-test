{"ast":null,"code":"var _jsxFileName = \"/Users/jithin.ramapurath/jramapurath/code/Videotest/src/audioRecorder.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AudioRecorder() {\n  _s();\n\n  const [stream, setStream] = useState({\n    access: false,\n    recorder: null,\n    error: \"\"\n  });\n  const [recording, setRecording] = useState({\n    active: false,\n    available: false,\n    url: \"\"\n  });\n  const chunks = useRef([]);\n\n  const checkPermission = () => {\n    const constraints = {\n      'audio': true\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(tream => {\n      alert(\"Got permission\");\n      getAccess();\n    }).catch(error => {\n      console.error('Error accessing media devices.', error);\n    });\n  };\n\n  navigator.mediaDevices.enumerateDevices().then(function (devices) {\n    devices.forEach(function (device) {\n      console.log(device.kind + \": \" + device.label + \" id = \" + device.deviceId);\n    });\n  }).catch(function (err) {\n    console.log(err.name + \": \" + err.message);\n  });\n\n  function getAccess() {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(mic => {\n      let mediaRecorder;\n\n      try {\n        mediaRecorder = new MediaRecorder(mic, {\n          mimeType: \"audio/webm\"\n        });\n      } catch (err) {\n        console.log(err);\n      } // @ts-ignore\n\n\n      const track = mediaRecorder.stream.getTracks()[0];\n\n      track.onended = () => console.log(\"ended\"); // @ts-ignore\n\n\n      mediaRecorder.onstart = function () {\n        setRecording({\n          active: true,\n          available: false,\n          url: \"\"\n        });\n      }; // @ts-ignore\n\n\n      mediaRecorder.ondataavailable = function (e) {\n        console.log(\"data available\"); // @ts-ignore\n\n        chunks.current.push(e.data);\n      }; // @ts-ignore\n\n\n      mediaRecorder.onstop = async function () {\n        console.log(\"stopped\");\n        const url = URL.createObjectURL(chunks.current[0]);\n        chunks.current = [];\n        setRecording({\n          active: false,\n          available: true,\n          url\n        });\n      };\n\n      setStream({ ...stream,\n        access: true,\n        // @ts-ignore\n        recorder: mediaRecorder\n      });\n    }).catch(error => {\n      console.log(error);\n      setStream({ ...stream,\n        error\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), stream.access ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        // @ts-ignore\n        className: recording.active ? \"active\" : null,\n        disabled: recording.active // @ts-ignore\n        ,\n        onClick: () => !recording.active && stream.recorder.start(),\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), recording.active && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Recording in progress \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !recording.active,\n        onClick: () => // @ts-ignore\n        stream.recorder.stop(),\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), recording.available && /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: recording.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 45\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkPermission,\n      children: \"Geta Mic Access\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AudioRecorder, \"LiVp4rM5aaBvwMpg4LUc4JyoNeU=\");\n\n_c = AudioRecorder;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"sources":["/Users/jithin.ramapurath/jramapurath/code/Videotest/src/audioRecorder.tsx"],"names":["React","useState","useRef","AudioRecorder","stream","setStream","access","recorder","error","recording","setRecording","active","available","url","chunks","checkPermission","constraints","navigator","mediaDevices","getUserMedia","then","tream","alert","getAccess","catch","console","enumerateDevices","devices","forEach","device","log","kind","label","deviceId","err","name","message","audio","mic","mediaRecorder","MediaRecorder","mimeType","track","getTracks","onended","onstart","ondataavailable","e","current","push","data","onstop","URL","createObjectURL","start","stop"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nexport default function AudioRecorder() {\n    const [stream, setStream] = useState({\n        access: false,\n        recorder: null,\n        error: \"\"\n    });\n\n    const [recording, setRecording] = useState({\n        active: false,\n        available: false,\n        url: \"\"\n    });\n\n    const chunks = useRef([]);\n\n    const checkPermission = () => {\n\n        const constraints = {\n            'audio': true\n        }\n\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then(\n                tream => {\n                    alert(\"Got permission\")\n                    getAccess()\n                })\n            .catch(error => {\n                console.error('Error accessing media devices.', error);\n            });\n    }\n\n    navigator.mediaDevices.enumerateDevices()\n        .then(function (devices) {\n            devices.forEach(function (device) {\n                console.log(device.kind + \": \" + device.label +\n                    \" id = \" + device.deviceId);\n            });\n        })\n        .catch(function (err) {\n            console.log(err.name + \": \" + err.message);\n        });\n\n    function getAccess() {\n        navigator.mediaDevices\n            .getUserMedia({ audio: true })\n            .then((mic) => {\n                let mediaRecorder;\n\n                try {\n                    mediaRecorder = new MediaRecorder(mic, {\n                        mimeType: \"audio/webm\"\n                    });\n                } catch (err) {\n                    console.log(err);\n                }\n\n                // @ts-ignore\n                const track = mediaRecorder.stream.getTracks()[0];\n                track.onended = () => console.log(\"ended\");\n\n                // @ts-ignore\n                mediaRecorder.onstart = function () {\n                    setRecording({\n                        active: true,\n                        available: false,\n                        url: \"\"\n                    });\n                };\n\n                // @ts-ignore\n                mediaRecorder.ondataavailable = function (e) {\n                    console.log(\"data available\");\n                    // @ts-ignore\n                    chunks.current.push(e.data);\n                };\n\n                // @ts-ignore\n                mediaRecorder.onstop = async function () {\n                    console.log(\"stopped\");\n\n                    const url = URL.createObjectURL(chunks.current[0]);\n                    chunks.current = [];\n\n                    setRecording({\n                        active: false,\n                        available: true,\n                        url\n                    });\n                };\n\n                setStream({\n                    ...stream,\n                    access: true,\n                    // @ts-ignore\n                    recorder: mediaRecorder\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                setStream({ ...stream, error });\n            });\n    }\n\n    return (\n        <div className=\"App\">\n            <br />\n            <br />\n            <br />\n            {stream.access ? (\n                <div className=\"audio-container\">\n                    <button\n                        // @ts-ignore\n                        className={recording.active ? \"active\" : null}\n                        disabled={recording.active}\n                        // @ts-ignore\n                        onClick={() => !recording.active && stream.recorder.start()}\n                    >\n                        Start Recording\n                    </button>\n\n                    {recording.active && <p>Recording in progress </p>}\n                    <br />\n                    <br />\n                    <br />\n                    <button\n                        disabled={!recording.active}\n                        onClick={() =>\n                            // @ts-ignore\n                            stream.recorder.stop()}>Stop Recording</button>\n                    {recording.available && <audio controls src={recording.url} />}\n                </div>\n            ) : (\n                <button onClick={checkPermission}>Geta Mic Access</button>\n            )}\n        </div>\n    );\n\n}\n"]},"metadata":{},"sourceType":"module"}