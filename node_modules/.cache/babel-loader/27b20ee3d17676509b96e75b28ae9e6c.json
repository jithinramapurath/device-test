{"ast":null,"code":"var _jsxFileName = \"/Users/jithin.ramapurath/jramapurath/code/Videotest/src/deviceCheck.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactPlayer from 'react-player';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VideoRecorder() {\n  _s();\n\n  const [stream, setStream] = useState({\n    access: false,\n    recorder: null,\n    error: \"\"\n  });\n  const [recording, setRecording] = useState({\n    active: false,\n    available: false,\n    url: \"\"\n  });\n  const chunks = useRef([]);\n  const videoRef = useRef(null);\n  useEffect(() => {\n    getVideo();\n  }, [videoRef]);\n\n  const getVideo = () => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: {\n        width: 300,\n        height: 300\n      }\n    }).then(stream => {\n      let video = videoRef.current; // @ts-ignore\n\n      video.muted = true; // @ts-ignore\n\n      video.srcObject = stream; // @ts-ignore\n\n      video.play();\n      let mediaRecorder;\n\n      try {\n        mediaRecorder = new MediaRecorder(stream, {\n          mimeType: \"video/webm\"\n        });\n      } catch (err) {\n        console.log(err);\n      } // @ts-ignore\n\n\n      const track = mediaRecorder.stream.getTracks()[0];\n\n      track.onended = () => console.log(\"ended\"); // @ts-ignore\n\n\n      mediaRecorder.onstart = function () {\n        console.log(\"Video recording started\");\n        setRecording({\n          active: true,\n          available: false,\n          url: \"\"\n        });\n      }; // @ts-ignore\n\n\n      mediaRecorder.ondataavailable = function (e) {\n        console.log(\"data available\", e.data); // @ts-ignore\n\n        chunks.current.push(e.data);\n      }; // @ts-ignore\n\n\n      mediaRecorder.onstop = async function () {\n        console.log(\"stopped\");\n        const url = URL.createObjectURL(chunks.current[0]);\n        console.log('url', url);\n        chunks.current = [];\n        setRecording({\n          active: false,\n          available: true,\n          url\n        });\n      };\n\n      setStream({ ...stream,\n        access: true,\n        // @ts-ignore\n        recorder: mediaRecorder\n      });\n    }).catch(err => {\n      console.error(\"error:\", err);\n    });\n  };\n\n  const label = {\n    inputProps: {\n      'aria-label': 'Hide video for me'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: recording.active // @ts-ignore\n        ,\n        onClick: () => !recording.active && stream.recorder.start(),\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !recording.active,\n        onClick: () => // @ts-ignore\n        stream.recorder.stop(),\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), recording.available && /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        url: recording.url,\n        controls: true,\n        width: \"300px\",\n        height: \"300px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"player\",\n      ref: videoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(VideoRecorder, \"8UfwOxEqLrl4dS8ulsKOtmPGtaA=\");\n\n_c = VideoRecorder;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoRecorder\");","map":{"version":3,"sources":["/Users/jithin.ramapurath/jramapurath/code/Videotest/src/deviceCheck.tsx"],"names":["React","useState","useRef","useEffect","ReactPlayer","VideoRecorder","stream","setStream","access","recorder","error","recording","setRecording","active","available","url","chunks","videoRef","getVideo","navigator","mediaDevices","getUserMedia","audio","video","width","height","then","current","muted","srcObject","play","mediaRecorder","MediaRecorder","mimeType","err","console","log","track","getTracks","onended","onstart","ondataavailable","e","data","push","onstop","URL","createObjectURL","catch","label","inputProps","start","stop"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport ReactPlayer from 'react-player'\n\nimport './App.css'\n\nexport default function VideoRecorder() {\n    const [stream, setStream] = useState({\n        access: false,\n        recorder: null,\n        error: \"\"\n    });\n\n    const [recording, setRecording] = useState({\n        active: false,\n        available: false,\n        url: \"\"\n    });\n\n    const chunks = useRef([]);\n    const videoRef = useRef(null);\n\n    useEffect(() => {\n        getVideo();\n    }, [videoRef]);\n\n    const getVideo = () => {\n        navigator.mediaDevices\n            .getUserMedia({ audio: true, video: { width: 300, height: 300 } })\n            .then(stream => {\n                let video = videoRef.current;\n                // @ts-ignore\n                video.muted = true;\n                // @ts-ignore\n                video.srcObject = stream;\n                // @ts-ignore\n                video.play();\n                let mediaRecorder;\n                try {\n                    mediaRecorder = new MediaRecorder(stream, {\n                        mimeType: \"video/webm\"\n                    });\n                } catch (err) {\n                    console.log(err);\n                }\n\n                // @ts-ignore\n                const track = mediaRecorder.stream.getTracks()[0];\n                track.onended = () => console.log(\"ended\");\n\n                // @ts-ignore\n                mediaRecorder.onstart = function () {\n                    console.log(\"Video recording started\");\n                    setRecording({\n                        active: true,\n                        available: false,\n                        url: \"\"\n                    });\n                };\n\n                // @ts-ignore\n                mediaRecorder.ondataavailable = function (e) {\n                    console.log(\"data available\", e.data);\n                    // @ts-ignore\n                    chunks.current.push(e.data);\n                };\n\n                // @ts-ignore\n                mediaRecorder.onstop = async function () {\n                    console.log(\"stopped\");\n\n                    const url = URL.createObjectURL(chunks.current[0]);\n                    console.log('url', url)\n                    chunks.current = [];\n\n                    setRecording({\n                        active: false,\n                        available: true,\n                        url\n                    });\n                };\n\n                setStream({\n                    ...stream,\n                    access: true,\n                    // @ts-ignore\n                    recorder: mediaRecorder\n                });\n\n            })\n            .catch(err => {\n                console.error(\"error:\", err);\n            });\n    };\n\n    const label = { inputProps: { 'aria-label': 'Hide video for me' } };\n\n    return (\n        <div className=\"App\">\n            <div className=\"audio-container\">\n                <br />\n                <br />\n                <br />\n                <button\n                    disabled={recording.active}\n                    // @ts-ignore\n                    onClick={() => !recording.active && stream.recorder.start()}\n                >\n                    Start Recording\n                </button>\n                <br />\n                <br />\n                <br />\n                <button disabled={!recording.active}\n                    onClick={() =>\n                        // @ts-ignore\n                        stream.recorder.stop()}>Stop Recording</button>\n                {/* {recording.available && <video controls src={recording.url} />} */}\n                {recording.available && <ReactPlayer\n                    url={recording.url}\n                    controls={true}\n                    width=\"300px\"\n                    height=\"300px\"\n                />}\n            </div>\n            <br />\n            <br />\n            <br />\n    \n            {/* <div className=\"control\"><Switch {...label} defaultChecked size=\"small\" /></div> */}\n            <video id=\"player\" ref={videoRef} />\n        </div>\n    );\n\n}\n\n"]},"metadata":{},"sourceType":"module"}