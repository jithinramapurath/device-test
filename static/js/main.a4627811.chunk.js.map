{"version":3,"sources":["deviceCheck.tsx","audioRecorder.tsx","home.tsx","videoPlayer.tsx","App.js","reportWebVitals.js","index.js"],"names":["VideoRecorder","useState","access","recorder","error","stream","setStream","active","available","url","recording","setRecording","chunks","useRef","videoRef","useEffect","getVideo","navigator","mediaDevices","getUserMedia","audio","video","width","height","then","mediaRecorder","current","muted","srcObject","play","MediaRecorder","mimeType","err","console","log","getTracks","onended","onstart","ondataavailable","e","data","push","onstop","a","URL","createObjectURL","catch","className","disabled","onClick","start","stop","controls","id","ref","AudioRecorder","enumerateDevices","devices","forEach","device","kind","label","deviceId","name","message","browser","window","userAgent","match","getMediaType","src","tream","alert","mic","Home","navigate","useNavigate","VideoPlayer","App","Fragment","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4627811.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport ReactPlayer from 'react-player'\n\nimport './App.css'\n\nexport default function VideoRecorder() {\n    const [stream, setStream] = useState({\n        access: false,\n        recorder: null,\n        error: \"\"\n    });\n\n    const [recording, setRecording] = useState({\n        active: false,\n        available: false,\n        url: \"\"\n    });\n\n    const chunks = useRef([]);\n    const videoRef = useRef(null);\n\n    useEffect(() => {\n        getVideo();\n    }, [videoRef]);\n\n    const getVideo = () => {\n        navigator.mediaDevices\n            .getUserMedia({ audio: true, video: { width: 300, height: 300 } })\n            .then(stream => {\n                let video = videoRef.current;\n                // @ts-ignore\n                video.muted = true;\n                // @ts-ignore\n                video.srcObject = stream;\n                // @ts-ignore\n                video.play();\n                let mediaRecorder;\n                try {\n                    mediaRecorder = new MediaRecorder(stream, {\n                        mimeType: \"video/webm\"\n                    });\n                } catch (err) {\n                    console.log(err);\n                }\n\n                // @ts-ignore\n                const track = mediaRecorder.stream.getTracks()[0];\n                track.onended = () => console.log(\"ended\");\n\n                // @ts-ignore\n                mediaRecorder.onstart = function () {\n                    console.log(\"Video recording started\");\n                    setRecording({\n                        active: true,\n                        available: false,\n                        url: \"\"\n                    });\n                };\n\n                // @ts-ignore\n                mediaRecorder.ondataavailable = function (e) {\n                    console.log(\"data available\", e.data);\n                    // @ts-ignore\n                    chunks.current.push(e.data);\n                };\n\n                // @ts-ignore\n                mediaRecorder.onstop = async function () {\n                    console.log(\"stopped\");\n\n                    const url = URL.createObjectURL(chunks.current[0]);\n                    console.log('url', url)\n                    chunks.current = [];\n\n                    setRecording({\n                        active: false,\n                        available: true,\n                        url\n                    });\n                };\n\n                setStream({\n                    ...stream,\n                    access: true,\n                    // @ts-ignore\n                    recorder: mediaRecorder\n                });\n\n            })\n            .catch(err => {\n                console.error(\"error:\", err);\n            });\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"audio-container\">\n                <br />\n                <br />\n                <br />\n                <button\n                    disabled={recording.active}\n                    // @ts-ignore\n                    onClick={() => !recording.active && stream.recorder.start()}\n                >\n                    Start Recording\n                </button>\n                <br />\n                <br />\n                <br />\n                <button disabled={!recording.active}\n                    onClick={() =>\n                        // @ts-ignore\n                        stream.recorder.stop()}>Stop Recording</button>\n                {/* {recording.available && <video controls src={recording.url} />} */}\n                {recording.available && <ReactPlayer\n                    url={recording.url}\n                    controls={true}\n                    width=\"300px\"\n                    height=\"300px\"\n                />}\n            </div>\n            <br />\n            <br />\n            <br />\n    \n            {/* <div className=\"control\"><Switch {...label} defaultChecked size=\"small\" /></div> */}\n            <video id=\"player\" ref={videoRef} />\n        </div>\n    );\n\n}\n\n","import React, { useState, useRef } from \"react\";\n\nexport default function AudioRecorder() {\n    const [stream, setStream] = useState({\n        access: false,\n        recorder: null,\n        error: \"\"\n    });\n\n    const [recording, setRecording] = useState({\n        active: false,\n        available: false,\n        url: \"\"\n    });\n\n    const chunks = useRef([]);\n\n    const checkPermission = () => {\n\n        const constraints = {\n            'audio': true\n        }\n\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then(\n                tream => {\n                    alert(\"Got permission\")\n                    getAccess()\n                })\n            .catch(error => {\n                console.error('Error accessing media devices.', error);\n            });\n    }\n\n    navigator.mediaDevices.enumerateDevices()\n        .then(function (devices) {\n            devices.forEach(function (device) {\n                console.log(device.kind + \": \" + device.label +\n                    \" id = \" + device.deviceId);\n            });\n        })\n        .catch(function (err) {\n            console.log(err.name + \": \" + err.message);\n        });\n\n        let browser = window.navigator.userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || []\n\n        console.log(\"browser\", browser[1])\n        const getMediaType = () => {\n           if(browser[1] === 'Safari') return \"audio/mp4\"\n           else return \"audio/webm\"\n        }\n\n    function getAccess() {\n        navigator.mediaDevices\n            .getUserMedia({ audio: true })\n            .then((mic) => {\n                let mediaRecorder;\n\n                try {\n                    mediaRecorder = new MediaRecorder(mic, {\n                        mimeType: getMediaType()\n                    });\n                } catch (err) {\n                    console.log(err);\n                }\n\n                // @ts-ignore\n                const track = mediaRecorder.stream.getTracks()[0];\n                track.onended = () => console.log(\"ended\");\n\n                // @ts-ignore\n                mediaRecorder.onstart = function () {\n                    setRecording({\n                        active: true,\n                        available: false,\n                        url: \"\"\n                    });\n                };\n\n                // @ts-ignore\n                mediaRecorder.ondataavailable = function (e) {\n                    console.log(\"data available\");\n                    // @ts-ignore\n                    chunks.current.push(e.data);\n                };\n\n                // @ts-ignore\n                mediaRecorder.onstop = async function () {\n                    console.log(\"stopped\");\n\n                    const url = URL.createObjectURL(chunks.current[0]);\n                    chunks.current = [];\n\n                    setRecording({\n                        active: false,\n                        available: true,\n                        url\n                    });\n                };\n\n                setStream({\n                    ...stream,\n                    access: true,\n                    // @ts-ignore\n                    recorder: mediaRecorder\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                setStream({ ...stream, error });\n            });\n    }\n\n    return (\n        <div className=\"App\">\n            <br />\n            <br />\n            <br />\n            {stream.access ? (\n                <div className=\"audio-container\">\n                    <button\n                        // @ts-ignore\n                        className={recording.active ? \"active\" : null}\n                        disabled={recording.active}\n                        // @ts-ignore\n                        onClick={() => !recording.active && stream.recorder.start()}\n                    >\n                        Start Recording\n                    </button>\n\n                    {recording.active && <p>Recording in progress </p>}\n                    <br />\n                    <br />\n                    <br />\n                    <button\n                        disabled={!recording.active}\n                        onClick={() =>\n                            // @ts-ignore\n                            stream.recorder.stop()}>Stop Recording</button>\n                    {recording.available && <audio controls src={recording.url} />}\n                </div>\n            ) : (\n                <button onClick={checkPermission}>Geta Mic Access</button>\n            )}\n        </div>\n    );\n\n}\n","import * as React from 'react';\nimport { useNavigate } from 'react-router';\n\nimport './App.css'\n\nconst Home = () => {\n\n    let navigate = useNavigate();\n\n    return (\n        <div className=\"App\">\n            <br/>\n            <br/>\n            <br/>\n            <button onClick={() => navigate('/video')}>  Check video</button>\n            <br /> <br /> <br />\n            <button onClick={() => navigate('/audio')}> Check audio</button>\n            <br /> <br /> <br />\n            <button onClick={() => navigate('/playVideo')}> Play video</button>\n        </div>\n    )\n}\n\nexport default Home","import * as React from 'react';\nimport ReactPlayer from 'react-player'\n\nimport './App.css'\n\nconst VideoPlayer: React.FC = () => {\n    return ( \n        <div className=\"App\">\n         <ReactPlayer\n            url='https://www.youtube.com/watch?v=GCsxgn4j8ag'\n            controls={true}\n            width=\"300px\"\n            height=\"300px\"\n        />\n        </div>\n     );\n}\n \nexport default VideoPlayer;","import React from 'react';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport VideoRecorder from './deviceCheck'\nimport AudioRecorder from './audioRecorder'\nimport Home from './home';\nimport VideoPlayer from './videoPlayer'\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <React.Fragment>\n        <Routes>\n          <Route path=\"/device-test\" element={<Home />} />\n          <Route path=\"/video\" element={<VideoRecorder />} />\n          <Route path=\"/audio\" element={<AudioRecorder />} />\n          <Route path=\"/playVideo\" element={<VideoPlayer />} />\n        </Routes>\n      </React.Fragment>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}